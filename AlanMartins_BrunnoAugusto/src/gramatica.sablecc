Helpers

		enter = 13;	
	line_feed = 10;
		  tab = 9;
       espaco = ' ';
   
   eol = (enter | line_feed | line_feed enter);
   
   nao_numero = ['_' + [['a'..'z'] + ['A'..'Z']]]+;
   numero = ['0' .. '9']+;
   todos = [0 .. 127];
   sem_eol = [todos - [enter + line_feed]];
   sem_estrela = [todos - '*'];
   sem_estrela_e_barra = [sem_estrela - '/'];
   
   c_linha = '//' sem_eol*; 
   c_bloco = '/*' sem_estrela* '*'+ (sem_estrela_e_barra sem_estrela* '*'+ )* '/';
   sinal = '+' | '-';

Tokens
	
	num_inteiro = sinal? espaco* numero;
	num_real = sinal? espaco* numero '.' numero;
	string = ''' sem_eol+ ''';
	constante = 'constante';
	
	aspas_simples = ''';
	virgula = ',';
	ponto = '.';
    dois_pontos = ':';
    ponto_virgula = ';';
    l_par = '(';
    r_par = ')';
    l_colc = '[';
    r_colc = ']';
    mult = '*';
    div = '/';
    mais = '+';
    menos = '-';
    atribuicao = '<-';
    
    igual = '=';
    igual_log = '==';
    diferente = '<>';
    menor = '<';
    menor_igual = '<=';
    maior = '>';
    maior_igual = '>=';
    e = 'e';
    ou = 'ou'; 
    xou = 'xou';
    nao = 'nao';
    
    programa = 'programa';
    variavel = 'var';
    inicio = 'inicio';
    fim = 'fim.';
    fim_para = 'fim' espaco+ 'para';
    fim_enquanto = 'fim' espaco+ 'enquanto';
    fim_se = 'fim' espaco+ 'se';
    se = 'se'; 
    enquanto = 'enquanto';
    para = 'para';
    de = 'de';
    entao = 'entao';
    faca = 'faca';
    senao = 'senao';
    repita = 'repita';
    ate = 'ate'; 
    passo = 'passo';   
    escreva = 'escreva';
    leia = 'leia';
    avalie = 'avalie';
    caso = 'caso';
    
    caractere = 'caractere';
    inteiro = 'inteiro';
    real = 'real';
    
    branco = (espaco | tab | line_feed | enter)*; 
    id = nao_numero (numero | nao_numero)*;
    comentario = c_linha | c_bloco;
	

Ignored Tokens
 	 branco,
 	 comentario;
 	 
Productions
	program = programa id inicio declaracao comando fim ;

  	declaracao = {unica_var} tipo dois_pontos var ponto_virgula
  			   | {multipla_var} tipo dois_pontos [var1]:var virgula [var2]:var ponto_virgula
  			   | {constantes} constante id valor ponto_virgula;
  	
  	tipo = {tipo_real} real 
  		 | {tipo_inteiro} inteiro 
  		 | {tipo_caractere} caractere;
  	
  	var = {identificador} id 
  		| {vetor} id l_colc num_inteiro r_colc;
  	
  	valor = {real} num_real 
  		  | {inteiro} num_inteiro 
  		  | {string} string; 
  	
  	comando = {variable} var atribuicao exp ponto_virgula
  			| {unica_leitura} leia l_par var r_par ponto_virgula
  			| {unica_escrita} escreva l_par exp r_par ponto_virgula
			| {multipla_leitura} leia l_par [antes]:var virgula [depois]:var r_par ponto_virgula
  			| {multipla_escrita} escreva l_par [antes]:exp virgula [depois]:exp r_par ponto_virgula
  	
  			| {enquanto_comandos} enquanto l_par exp_logica r_par faca  [cmd1]:comando  [pv1]:ponto_virgula [cmd2]:comando [pv2]:ponto_virgula fim_enquanto  [pv3]:ponto_virgula
  			| {enquanto_comando} enquanto l_par exp_logica r_par faca comando [pv1]:ponto_virgula fim_enquanto [pv2]:ponto_virgula
  			
  			| {repita_comandos} repita [cmd1]:comando [pv1]:ponto_virgula [cmd2]:comando [pv2]:ponto_virgula ate l_par exp_logica r_par [pv3]:ponto_virgula
  			| {repita_comando} repita comando [pv1]:ponto_virgula ate l_par exp_logica r_par [pv2]:ponto_virgula
  			
			| {para_ate_comandos} para var de [int1]:num_inteiro ate [int2]:num_inteiro faca [cmd1]:comando  [pv1]:ponto_virgula  [cmd2]:comando [pv2]:ponto_virgula fim_para [pv3]:ponto_virgula
  			| {para_ate_comando} para var de [int1]:num_inteiro ate [int2]:num_inteiro faca comando [pv1]:ponto_virgula fim_para [pv2]:ponto_virgula
  			
  			| {para_passo_comandos} para var de [int1]:num_inteiro passo [int2]:num_inteiro ate [int3]:num_inteiro faca [cmd1]:comando [pv1]:ponto_virgula [cmd2]:comando [pv2]:ponto_virgula fim_para [pv3]:ponto_virgula
  			| {para_passo_comando} para var de [int1]:num_inteiro passo [int2]:num_inteiro ate [int3]:num_inteiro faca comando [pv1]:ponto_virgula fim_para [pv2]:ponto_virgula
  	;
  			
  	exp = {valor}              valor
	    | {var}                var
	    | {exp_par}            l_par exp r_par
	    | {menos_exp}          menos exp
	    | {adicao_exp}         [l]:exp mais [r]:exp
	    | {subtracao_exp}      [l]:exp menos [r]:exp
	    | {multiplicacao_exp}  [l]:exp mult [r]:exp
	    | {divisao_exp}        [l]:exp div [r]:exp
	    | exp_logica
     ;
     
    exp_logica = {igual}        [l]:exp igual [r]:exp
    		   | {diferente}    [l]:exp diferente [r]:exp
    		   | {menor_igual}  [l]:exp menor_igual [r]:exp
    		   | {maior_igual}  [l]:exp maior_igual [r]:exp
    		   | {menor}        [l]:exp menor [r]:exp
    		   | {maior}        [l]:exp maior [r]:exp
    		   | {nao}          nao exp_logica
    		   | {e}            [l]:exp_logica e [r]:exp_logica
    		   | {ou}           [l]:exp_logica ou [r]:exp_logica
    		   | {xou}          [l]:exp_logica xou [r]:exp_logica
   	 ;                 
    		     		
  			
  	