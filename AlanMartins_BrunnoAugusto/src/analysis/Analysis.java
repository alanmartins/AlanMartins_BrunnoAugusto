/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAUnicaVarDeclaracao(AUnicaVarDeclaracao node);
    void caseAMultiplaVarDeclaracao(AMultiplaVarDeclaracao node);
    void caseAConstantesDeclaracao(AConstantesDeclaracao node);
    void caseATipoRealTipo(ATipoRealTipo node);
    void caseATipoInteiroTipo(ATipoInteiroTipo node);
    void caseATipoCaractereTipo(ATipoCaractereTipo node);
    void caseAIdentificadorVar(AIdentificadorVar node);
    void caseAVetorVar(AVetorVar node);
    void caseARealValor(ARealValor node);
    void caseAInteiroValor(AInteiroValor node);
    void caseAStringValor(AStringValor node);
    void caseAVariableComando(AVariableComando node);
    void caseAUnicaLeituraComando(AUnicaLeituraComando node);
    void caseAUnicaEscritaComando(AUnicaEscritaComando node);
    void caseAMultiplaLeituraComando(AMultiplaLeituraComando node);
    void caseAMultiplaEscritaComando(AMultiplaEscritaComando node);
    void caseAEnquantoComandosComando(AEnquantoComandosComando node);
    void caseAEnquantoComandoComando(AEnquantoComandoComando node);
    void caseARepitaComandosComando(ARepitaComandosComando node);
    void caseARepitaComandoComando(ARepitaComandoComando node);
    void caseAParaAteComandosComando(AParaAteComandosComando node);
    void caseAParaAteComandoComando(AParaAteComandoComando node);
    void caseAParaPassoComandosComando(AParaPassoComandosComando node);
    void caseAParaPassoComandoComando(AParaPassoComandoComando node);
    void caseAValorExp(AValorExp node);
    void caseAVarExp(AVarExp node);
    void caseAExpParExp(AExpParExp node);
    void caseAMenosExpExp(AMenosExpExp node);
    void caseAAdicaoExpExp(AAdicaoExpExp node);
    void caseASubtracaoExpExp(ASubtracaoExpExp node);
    void caseAMultiplicacaoExpExp(AMultiplicacaoExpExp node);
    void caseADivisaoExpExp(ADivisaoExpExp node);
    void caseAExp(AExp node);
    void caseAIgualExpLogica(AIgualExpLogica node);
    void caseADiferenteExpLogica(ADiferenteExpLogica node);
    void caseAMenorIgualExpLogica(AMenorIgualExpLogica node);
    void caseAMaiorIgualExpLogica(AMaiorIgualExpLogica node);
    void caseAMenorExpLogica(AMenorExpLogica node);
    void caseAMaiorExpLogica(AMaiorExpLogica node);
    void caseANaoExpLogica(ANaoExpLogica node);
    void caseAEExpLogica(AEExpLogica node);
    void caseAOuExpLogica(AOuExpLogica node);
    void caseAXouExpLogica(AXouExpLogica node);

    void caseTNumInteiro(TNumInteiro node);
    void caseTNumReal(TNumReal node);
    void caseTString(TString node);
    void caseTConstante(TConstante node);
    void caseTAspasSimples(TAspasSimples node);
    void caseTVirgula(TVirgula node);
    void caseTPonto(TPonto node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLColc(TLColc node);
    void caseTRColc(TRColc node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTIgual(TIgual node);
    void caseTIgualLog(TIgualLog node);
    void caseTDiferente(TDiferente node);
    void caseTMenor(TMenor node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaior(TMaior node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXou(TXou node);
    void caseTNao(TNao node);
    void caseTPrograma(TPrograma node);
    void caseTVariavel(TVariavel node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTFimPara(TFimPara node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTFimSe(TFimSe node);
    void caseTSe(TSe node);
    void caseTEnquanto(TEnquanto node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTEntao(TEntao node);
    void caseTFaca(TFaca node);
    void caseTSenao(TSenao node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTPasso(TPasso node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTCaractere(TCaractere node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTBranco(TBranco node);
    void caseTId(TId node);
    void caseTComentario(TComentario node);
    void caseEOF(EOF node);
}
